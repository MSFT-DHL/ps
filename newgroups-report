<#---------------------------------------------------------------------------- 
Legal Warning
This script is not supported in any standard Microsoft support program or service. This script is provided "AS IS" without warranty of any kind. Microsoft also disclaims all implied warranties, including, without limitation, any implied warranties of merchantability or fitness for a particular purpose. All risks arising from the use or performance of this script are at your own risk. In no event shall Microsoft or the author be liable for any damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or any other pecuniary loss) arising out of the use or inability to use this script, even if Microsoft has been advised of the possibility of such damages.

This publication is provided "AS IS" without any warranty. The execution of this script is at your own risk.

Author: Dany Harding Lamarche
Email: hl.d@microsoft.com
Profile: aka.ms/dany

Version 2.2
---------------------------------------------------------------------------- #>
cls
# Connect to Exchange Online
Connect-ExchangeOnline

# Connect to Azure AD
Connect-AzureAD

# Get the current date and time to add to the CSV file name
$date = Get-Date -Format "yyyy-MM-dd-HH-mm"

# Get the list of groups created within the last 30 days
$groups = Get-UnifiedGroup -ResultSize Unlimited | Where-Object {$_.WhenCreated -ge (Get-Date).AddDays(-30)} | Select-Object WhenCreated,DisplayName,Language,AccessType,ManagedBy

# Initialize an empty array to store the results
$results = @()

# Loop through each group and retrieve the managedBy user UPN
foreach ($group in $groups) {
    $owners = $group.ManagedBy | ForEach-Object { Get-AzureADUser -SearchString $_ | where {$_.UserType -eq 'Member'}} | Select-Object Display*
    $ownersSMTP = $group.ManagedBy | ForEach-Object { Get-Mailbox -Identity $_ } | Select-Object PrimarySmtpAddress

    # Retrieve the primary SMTP address for the group
    $groupsSMTP = Get-UnifiedGroup $group.DisplayName | Select-Object PrimarySmtpAddress

    # Create a new custom object with the group name, managedBy user UPN, and primary SMTP address
    $result = [PSCustomObject] @{
        "Group Name" = $group.DisplayName
        "Group Primary SMTP" = $groupsSMTP.PrimarySmtpAddress
        "Owners Name" = ($owners | Select-Object -ExpandProperty DisplayName) -join '; '
        "Owners SMTP" = ($ownersSMTP | Select-Object -ExpandProperty PrimarySmtpAddress) -join '; '
        Language = $group.Language.Name
        "Access Type" = $group.AccessType
    }

    # Add the result to the array
    $results += $result
}

# Check if the folder exists, create it if it does not
$csvPath = "C:\temp\O365Groups_$date.csv"
$folderPath = Split-Path $csvPath
if(!(Test-Path $folderPath)){
    New-Item -ItemType Directory -Force -Path $folderPath
}

# Export the results to a CSV file
$results | Export-Csv -Path "$csvPath" -Encoding UTF8 -NoTypeInformation

# Values
Write-Host "Enter the smtp server that will be use to relay the report." -ForegroundColor "Yellow"
$smtpServer = read-host "Example: smtp.office365.com"
Write-Host "Enter the port number for this server." -ForegroundColor "Yellow"
$smtpPort = read-host "Example: 587"
Write-Host "Enter the email address of the sender (shared mailbox not allowed)." -ForegroundColor "Yellow"
$from = read-host "Example: sender@domain.com"
Write-Host "Enter the email address of the recipient." -ForegroundColor "Yellow"
$to = read-host "Example: recipient@domain.com"

# Connect to Office 365 SMTP server using TLS
$smtp = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
$smtp.EnableSsl = $true

# Authenticate with SecureString
$Username = $from
Write-Host "Enter the sender's password for TLS authentication purposes." -ForegroundColor "Yellow"
$Psw = read-host "Example: password"
$Password = $Psw | ConvertTo-SecureString -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username, $password)

# Set the credentials on the SmtpClient object
$smtp.Credentials = $credential

# Defined email parameters
$Subject = "Monthly report of new Office 365 Groups created within 30 days"
$Body = "This email contains the monthly report of new Office 365 Groups created within the last 30 days. Please find the attached CSV file for more information."

# Create a new email message
$emailMessage = New-Object System.Net.Mail.MailMessage($From, $To, $Subject, $Body)

# Add the CSV file as an attachment
$emailAttachment = New-Object System.Net.Mail.Attachment("$csvPath")
$emailMessage.Attachments.Add($emailAttachment)

# Send the email
$smtp.Send($emailMessage)
